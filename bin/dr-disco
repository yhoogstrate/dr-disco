#!/usr/bin/env python
# *- coding: utf-8 -*-
# vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79:


import drdisco
import pysam
import click


from drdisco.IntronDecomposition import BAMExtract
from drdisco.IntronDecomposition import IntronDecomposition
from drdisco.ChimericAlignment import ChimericAlignment
from drdisco.ChimericAlignment import ChimericAlignmentFixed
from drdisco.Classify import Classify, Blacklist

"""[License: GNU General Public License v3 (GPLv3)]

    Dr. Disco: fusion gene detection in random hexamer RNA-seq data
    Copyright (C) 2017  Youri Hoogstrate

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


    You can contact me via the github repository at the following url:
    <https://github.com/yhoogstrate/dr-disco>

    You can e-mail me via 'yhoogstrate' at the following webmail domain:
    gmail dot com
"""


def main():
    CLI()


@click.version_option(drdisco.__version__ + "\n\n" + drdisco.__license_notice__ + "\n\nCopyright (C) 2017  " + drdisco.__author__ + ".\n\nFor more info please visit:\n" + drdisco.__homepage__)
@click.group()
def CLI():
    pass


@CLI.command(name="fix", short_help="Fixes chimeric SAM/BAM alignment produced by RNA-STAR")
@click.option("--temp-dir", "-t", type=click.Path(exists=True), default="/tmp", help="Path in which temp files are stored (default: /tmp)")
@click.argument('input_alignment_file', type=click.Path(exists=True))
@click.argument('output_alignment_file')
def CLI_fix_chimeric_alignment(temp_dir, input_alignment_file, output_alignment_file):
    alignment_handle = ChimericAlignment(input_alignment_file)
    alignment_handle.convert(output_alignment_file, temp_dir)


@CLI.command(name="unfix", short_help="Tries to restore the BAM file")
@click.option("--temp-dir", "-t", type=click.Path(exists=True), default="/tmp", help="Path in which temp files are stored (default: /tmp)")
@click.argument('input_alignment_file', type=click.Path(exists=True))
@click.argument('output_alignment_file')
def CLI_unfix_chimeric_alignment(temp_dir, input_alignment_file, output_alignment_file):
    alignment_handle = ChimericAlignmentFixed(input_alignment_file)
    alignment_handle.convert(output_alignment_file, temp_dir)


@CLI.command(name='detect', short_help='Detects and interprets intronic break points')
@click.option("--min-e-score", "-m", default=8, help="Minimal score to initiate pulling sub-graphs (larger numbers boost performance but result in suboptimal results)")
@click.argument('bam_input_file', type=click.Path(exists=True))
@click.argument('output_file', type=click.File('w'))
def CLI_detect_break_points(min_e_score, bam_input_file, output_file):
    ic = IntronDecomposition(bam_input_file)
    ic.decompose(min_e_score)
    ic.export(output_file)


@CLI.command(name='bam-extract', short_help='Extract reads from two chromosomal positions (and also take the mates with the same name) - regions are in the format chr1:123-546')
@click.argument('region1')
@click.argument('region2')
@click.argument('bam_input_file', type=click.Path(exists=True))
@click.argument('bam_output_file')
def CLI_bam_extract_regions(region1, region2, bam_input_file, bam_output_file):
    c = BAMExtract(bam_input_file, False)
    c.extract(region1, region2, bam_output_file)


@CLI.command(name='logo-sequence', short_help='Extracts the genomic sequence before (negative file) or after (positive file) a given genomic location, in order to be used for creating sequence logo\'s.')
@click.argument('region')
@click.argument('fasta_input_file')
@click.option('-n', '--offset-negative', type=int, default=10)
@click.option('-p', '--offset-positive', type=int, default=10)
@click.argument('fasta_output_file_negative')
@click.argument('fasta_output_file_positive')
def CLI_logo_sequence(region, fasta_input_file, offset_negative, offset_positive, fasta_output_file_negative, fasta_output_file_positive):
    _chr, _pos = region.split(':')
    _chr, _pos = str(_chr), int(_pos)

    fh = pysam.Fastafile(fasta_input_file)
    fh_n = open(fasta_output_file_negative, 'w')
    fh_n.write(">" + _chr + ":" + str(_pos) + "- (" + str(_pos - offset_negative + 1) + "-" + str(_pos + 1) + ")\n")
    fh_n.write(fh.fetch(_chr, _pos - offset_negative + 1, _pos + 1) + "\n")
    fh_n.close()

    fh_p = open(fasta_output_file_positive, 'w')
    fh_p.write(">" + _chr + ":" + str(_pos) + "+ (" + str(_pos + 1) + "-" + str(_pos + offset_positive + 1) + ")\n")
    fh_p.write(fh.fetch(_chr, _pos + 1, _pos + offset_positive + 1) + "\n")
    fh_p.close()
    fh.close()


@CLI.command(name='classify', short_help='Classifies between true and false positivies, without rerunning a whole dataset.')
@click.argument('table_input_file', type=click.Path(exists=True))
@click.argument('table_output_file')
@click.option('--only-valid', is_flag=True, default=False, help="Only return results marked as 'valid'")
@click.option('--blacklist-regions', help="Blacklist these regions (BED file)")
@click.option('--blacklist-junctions', help="Blacklist these region-to-region junctions (custom format, see files in ./share/)")
def CLI_classify(table_input_file, table_output_file, only_valid, blacklist_regions, blacklist_junctions):
    blacklist = Blacklist()

    if blacklist_regions:
        pass
        #blacklist.add_regions_from_bed(blacklist_regions)

    if blacklist_junctions:
        blacklist.add_junctions_from_file(blacklist_junctions)

    cl = Classify(table_input_file)
    cl.classify(table_output_file, only_valid, blacklist)


if __name__ == '__main__':
    main()
