#!/usr/bin/env python2
# *- coding: utf-8 -*-
# vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79:

"""
Dr. Disco

[License: GNU General Public License v3 (GPLv3)]
 
 This file is part of Dr. Disco.
 
 FuMa is free software: you can redistribute it and/or modify
 it under the terms of the GNU General Public License as published by
 the Free Software Foundation, either version 3 of the License, or
 (at your option) any later version.
 
 Dr. Disco is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
 GNU General Public License for more details.
 You should have received a copy of the GNU General Public License
 along with this program. If not, see <http://www.gnu.org/licenses/>.
"""

import drdisco
import unittest,logging,sys,subprocess,filecmp,pysam,os
import click

import drdisco
from fuma.Readers import ReadFusionCatcherFinalList as FusionCatcher
from drdisco.IntronDecomposition import IntronDecomposition
from drdisco.ChimericAlignment import ChimericAlignment
from drdisco.BAMExtract import *

logging.basicConfig(level=logging.DEBUG,format=drdisco.__log_format__,stream=sys.stdout)


def main():
    CLI()

@click.version_option(drdisco.__version__+"\n\n"+drdisco.__license_notice__+"\n\nWritten by "+drdisco.__author__+".\n\nFor more info please visit:\n"+drdisco.__homepage__)
@click.group()
def CLI():
    pass


#@click.command(help="This tool requires the '*.Chimeric.out.sam' files of RNA STAR converted into BAM")
@CLI.command(name="fix",short_help="Fixes chimeric SAM/BAM alignment produced by RNA-STAR")
@click.option("--temp-dir","-t",type=click.Path(exists=True),default="/tmp")#,help="Path in which temporary files will be stored (default: /tmp)"
@click.argument('output_alignment_file')
@click.argument('input_alignment_file', type=click.Path(exists=True))
def CLI_fix_chimeric_alignment(
        temp_dir,output_alignment_file,
        input_alignment_file):
    alignment_handle = ChimericAlignment(input_alignment_file)
    alignment_handle.convert(output_alignment_file,temp_dir)


@CLI.command(name='intronic',short_help='Detects and interprets intronic break points')
@click.argument('output_file', type=click.File('w'))
@click.argument('fusion_candidates_input_file', type=click.Path(exists=True))
@click.argument('bam_input_file', type=click.Path(exists=True))
def CLI_detect_intronic_break_points(
        output_file,
        fusion_candidates_input_file,
        bam_input_file):
    #bps = FusionCatcher(fusion_candidates_input_file,"")
    #bps_i = bps.__iter__()
    #bp = bps_i.next()

    ic = IntronDecomposition(bam_input_file)
    #ic.annotate_genes(gobj)
    ic.decompose()
    ic.export(output_file)


@CLI.command(name='bam-extract',short_help='Extract reads from two chromosomal positions (and also take the mates with the same name) - regions are in the format chr1:123-546')
@click.argument('region1')
@click.argument('region2')
@click.argument('bam_output_file')
@click.argument('bam_input_file', type=click.Path(exists=True))
def CLI_bam_extract_regions(region1,region2,bam_output_file,bam_input_file):
    c = BAMExtract.BAMExtract(bam_input_file)
    c.extract(region1, region2, bam_output_file)


if __name__ == '__main__':
    main()

