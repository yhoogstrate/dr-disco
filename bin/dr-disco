#!/usr/bin/env python
# *- coding: utf-8 -*-
# vim: set expandtab tabstop=4 shiftwidth=4 softtabstop=4 textwidth=79:


"""[License: GNU General Public License v3 (GPLv3)]

    Dr. Disco: fusion gene detection in random hexamer RNA-seq data
    Copyright (C) 2017  Youri Hoogstrate

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.


    You can contact me via the github repository at the following url:
    <https://github.com/yhoogstrate/dr-disco>

    You can e-mail me via 'y.hoogstrate' at the following webmail domain:
    gmail dot com
"""


import drdisco
import pysam
import click


from drdisco.IntronDecomposition import BAMExtract
from drdisco.IntronDecomposition import IntronDecomposition
from drdisco.ChimericAlignment import ChimericAlignment
from drdisco.ChimericAlignment import ChimericAlignmentFixed
from drdisco.alignment import alignment
from drdisco.WithinBAM import WithinBAM

from drdisco.Classify import Blacklist
from drdisco.DetectOutput import DetectOutput

from drdisco.utils import parse_pos
from drdisco.utils import test_pysam_version
from drdisco.utils import extract_newline_separated_file_as_set



def main():
    test_pysam_version()
    
    CLI()


@click.version_option(drdisco.__version__ + "\n\n" + drdisco.__license_notice__ + "\n\nCopyright (C) 2017  " + drdisco.__author__ + ".\n\nFor more info please visit:\n" + drdisco.__homepage__)
@click.group()
def CLI():
    pass


@CLI.command(name="fix", short_help="Fixes chimeric SAM/BAM alignment produced by RNA-STAR")
@click.option("--temp-dir", "-t", type=click.Path(exists=True), default="/tmp", help="Path in which temp files are stored (default: /tmp)")
@click.argument('input_alignment_file', type=click.Path(exists=True))
@click.argument('output_alignment_file')
def CLI_fix_chimeric_alignment(temp_dir, input_alignment_file, output_alignment_file):
    alignment_handle = ChimericAlignment(input_alignment_file)
    alignment_handle.convert(output_alignment_file, temp_dir)



@CLI.command(name="unfix", short_help="Tries to restore the BAM file")
@click.option("--temp-dir", "-t", type=click.Path(exists=True), default="/tmp", help="Path in which temp files are stored (default: /tmp)")
@click.argument('input_alignment_file', type=click.Path(exists=True))
@click.argument('output_alignment_file')
def CLI_unfix_chimeric_alignment(temp_dir, input_alignment_file, output_alignment_file):
    alignment_handle = ChimericAlignmentFixed(input_alignment_file)
    alignment_handle.convert(output_alignment_file, temp_dir)


@CLI.command(name='detect', short_help='Detects and interprets intronic break points')
@click.option("--min-e-score", "-m", default=8, help="Minimal score to initiate pulling sub-graphs (larger numbers boost performance but result in suboptimal results) [default=8]")
@click.argument('bam_input_file', type=click.Path(exists=True))
@click.argument('output_file', type=click.File('w'))
def CLI_detect_break_points(min_e_score, bam_input_file, output_file):
    ic = IntronDecomposition(bam_input_file)
    ic.decompose(min_e_score)
    ic.export(output_file)


@CLI.command(name='bam-extract', short_help='Extract reads from two chromosomal positions (and also take the mates with the same name) - regions are in the format chr1:123-546')
@click.option('--restrict-to-targeted-chromosomes',is_flag=True,help="Excludes reads of which a piece was aligned to other chromosomes than requested by the regions.")
@click.argument('region1')
@click.argument('region2')
@click.argument('bam_input_file', type=click.Path(exists=True))
@click.argument('bam_output_file')
def CLI_bam_extract_regions(restrict_to_targeted_chromosomes, region1, region2, bam_input_file, bam_output_file):
    c = BAMExtract(bam_input_file, False)
    c.extract(region1, region2, bam_output_file, restrict_to_targeted_chromosomes)


@CLI.command(name='bam-extract-by-readname', short_help='Extract reads by readname(s)')
@click.argument('bam_input_file', type=click.Path(exists=True))
@click.argument('bam_output_file')
@click.option('--readname-file','-f', is_flag=True, help="Use new line separated file with read names.")
@click.argument('readnames', nargs=-1)
def CLI_bam_extract_reads_by_name(bam_input_file, bam_output_file, readname_file, readnames):
    if readname_file:
        readnames = extract_newline_separated_file_as_set(readnames[0])
    else:
        readnames = set([_ for _ in readnames])
    
    a = alignment(bam_input_file)
    a.extract_reads_by_names(readnames, bam_output_file)



@CLI.command(name='logo-sequence', short_help='Extracts the genomic sequence before (negative file) or after (positive file) a given genomic location, in order to be used for creating sequence logo\'s.')
@click.argument('region')
@click.argument('fasta_input_file')
@click.option('-n', '--offset-negative', type=int, default=10)
@click.option('-p', '--offset-positive', type=int, default=10)
@click.argument('fasta_output_file_negative')
@click.argument('fasta_output_file_positive')
def CLI_logo_sequence(region, fasta_input_file, offset_negative, offset_positive, fasta_output_file_negative, fasta_output_file_positive):
    _chr, _pos = region.split(':')
    _chr, _pos = str(_chr), int(_pos)

    fh = pysam.Fastafile(fasta_input_file)
    fh_n = open(fasta_output_file_negative, 'w')
    fh_n.write(">" + _chr + ":" + str(_pos) + "- (" + str(_pos - offset_negative + 1) + "-" + str(_pos + 1) + ")\n")
    fh_n.write(fh.fetch(_chr, _pos - offset_negative + 1, _pos + 1) + "\n")
    fh_n.close()

    fh_p = open(fasta_output_file_positive, 'w')
    fh_p.write(">" + _chr + ":" + str(_pos) + "+ (" + str(_pos + 1) + "-" + str(_pos + offset_positive + 1) + ")\n")
    fh_p.write(fh.fetch(_chr, _pos + 1, _pos + offset_positive + 1) + "\n")
    fh_p.close()
    fh.close()


@CLI.command(name='classify', short_help='Classifies between true and false positivies, without rerunning a whole dataset.')
@click.argument('table_input_file', type=click.Path(exists=True))
@click.argument('table_output_file')
@click.option('--only-valid', is_flag=True, default=False, help="Only return results marked as 'valid'")
@click.option('--blacklist-regions', help="Blacklist these regions (BED file)")
@click.option('--blacklist-junctions', help="Blacklist these region-to-region junctions (custom format, see files in ./share/)")
@click.option('--min-chim-overhang', default=50, help="Minimum alignment length on each side of the junction. May need to be set to smaller values for read lengths smaller than 75bp. Larger values are more stringent. [default=50]")
@click.option('--ffpe', is_flag=True, default=False, help="Lowers the threshold for the relative amount of mismatches, as often found in FFPE material. Note that enabling this option will consequently result in more false positives.")
def CLI_classify(table_input_file, table_output_file, only_valid, blacklist_regions, blacklist_junctions, min_chim_overhang, ffpe):
    blacklist = Blacklist()

    if blacklist_junctions:
        blacklist.add_junctions_from_file(blacklist_junctions)

    if blacklist_regions:
        blacklist.add_regions_from_bed(blacklist_regions)

    cl = DetectOutput(table_input_file)
    cl.classify(table_output_file, only_valid, blacklist, min_chim_overhang, ffpe)


@CLI.command(name='integrate', short_help='Maps junctions back together that are likely to correspond to the same fusion event.')
@click.argument('table_input_file', type=click.Path(exists=True))
@click.argument('table_output_file')
@click.option('--gtf', help="Use gene annotation for estimating fusion genes and improve classification of exonic (GTF file)")
@click.option('--fasta', help="Use reference sequences to estimate edit distances to splice junction motifs (FASTA file)")
def CLI_integrate(table_input_file, table_output_file, gtf, fasta):
    cl = DetectOutput(table_input_file)

    gtf = str(gtf) if gtf else None
    fasta = str(fasta) if fasta else None

    cl.integrate(table_output_file, gtf, fasta)


@CLI.command(name='is-blacklisted', short_help='Quickly check whether a certain region or junction is blacklisted.')
@click.argument('pos1', nargs=1)
@click.argument('pos2', nargs=1, required=False)
@click.option('--blacklist-regions')
@click.option('--blacklist-junctions', help="Blacklist these region-to-region junctions (custom format, see files in ./share/)")
def CLI_is_blacklisted(pos1, pos2, blacklist_regions, blacklist_junctions):
    """When only a single position is given, only matches with blacklisted regions from blacklist_regions will be reported.

    When both POS1 and POS2 are provided, also blacklisted junctions between POS1 and POS2 as provided in the blacklist_junctions file will be reported.

    Positions need to be formated as chr:pos:
    chr1:1235 or chr1:12,345

    Positions can be made strand specific by adding them between curly brackets: chr1:12,345(+) or chr2:12345(-)
    """
    if (not blacklist_junctions) and (not blacklist_regions):
        raise RuntimeError("Please provide at least one blacklist (--blacklist-regions or --blacklist-junctions)")

    blacklist = Blacklist()

    if blacklist_junctions:
        blacklist.add_junctions_from_file(blacklist_junctions)

    if blacklist_regions:
        blacklist.add_regions_from_bed(blacklist_regions)

    entries = []
    if pos1 and pos2:
        pos1 = parse_pos(pos1)
        pos2 = parse_pos(pos2)

        pos1s = []
        pos2s = []

        if pos1[2] == '.':
            pos1s.append([pos1[0], pos1[1], '+'])
            pos1s.append([pos1[0], pos1[1], '-'])
        else:
            pos1s.append(pos1)

        if pos2[2] == '.':
            pos2s.append([pos2[0], pos2[1], '+'])
            pos2s.append([pos2[0], pos2[1], '-'])
        else:
            pos2s.append(pos2)

        for p1p in pos1s:
            for p2p in pos2s:
                entries += blacklist.is_blacklisted(p1p, p2p)
        entries = set(entries)
    else:
        pos1 = parse_pos(pos1)
        if pos1[2] == '.':  # unstranded
            pos1[2] = '+'
            pos2 = [pos1[0], pos1[1], '-']
            entries = blacklist.is_blacklisted_by_regions(pos1, pos2)
        else:
            entries = blacklist.is_blacklisted_by_regions(pos1, pos1)

    entries = sorted(list(entries))

    for k in range(len(entries)):
        print (str(k + 1) + "\t" + entries[k])



@CLI.command(name='chimeric-from-withinbam', short_help='Fetch Chimeric reads from the BAM files generated with \'--chimOutType WithinBAM\'.')
@click.option("--temp-dir", "-t", type=click.Path(exists=True), default="/tmp", help="Path in which temp files are stored (default: /tmp)")
@click.argument('input_alignment_file', type=click.Path(exists=True))
@click.argument('output_alignment_file')
def CLI_extract_chimeric_from_withinbam(temp_dir, input_alignment_file, output_alignment_file):
    alignment_handle = WithinBAM(input_alignment_file)
    alignment_handle.extract(output_alignment_file, temp_dir)





if __name__ == '__main__':
    main()
